1、入口页：
//导入express框架
var express = require("express")
//设置路由，指定请求路径
var userRouter = require("./Routers/userRouter")

var app = express()

//post需要的解析框架
var bodypaser = require("body-parser")//设置路由，指定请求路径

//解析post在url中携带的数据
app.use(bodypaser.urlencoded({extended:false}))
//解析传入的json
app.use(bodypaser.json())

//使用路由
app.use(userRouter)

app.listen(3000,()=>{
    console.log("服务器fuwutest启动了~~")
})

module.exports = app
===========================================
2、数据库连接页
//  连接数据库
const mongoose =require('mongoose')
mongoose.connect('mongodb://localhost/xscms');
//连接数据库
/**
 * 固定写法，连接对象，连接信息
 */
var db = mongoose.connection;//数据库的连接对象
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
    console.log("数据库"+db.name+"连接成功")
});

module.exports = mongoose
===========================================
3、mongoose配置页
//作为数据连接的bean使用
const mongoose = require("../conntect")
//数据库中每一列的属性值，以及是否...
var userSchema = new mongoose.Schema({
    name : {type:String},
    age : {type:Number},
    rex : {type:String},
    address : {type:String}
},  {collection:'site'
});

/**
 * 将schema 对象转化为数据模型model,schema(属性)不具备操作能力，需要有model(数据模型操作)
 创建模型，可以用它来操作数据库中的person集合，指的是整体。创建一个person集合
 person：数据库中的集合名称，当我们对其添加数据时如果person已经存在，则会保存到其目录下，
 如果未存在，则会创建person集合，然后再保存数据
 */
var User = mongoose.model('site', userSchema);
console.log("集合已连接")

module.exports = User
==========================================
4、路由配置页
/**
 * 引入express框架
 Express 提供了一种更好的方式
 专门用来包装路由的
 * @type {createApplication}
 */
var express = require("express")
// 1. 创建一个路由容器
var router = express.Router()
//引入User.js对象
var User = require("../Model/User")


// 2. 把路由都挂载到 router 路由容器中
//get请求
router.get("/get",(req,res)=>{
    console.log("执行get请求")
    res.send({err:0,msg:"get请求"})
})

//post请求
router.post("/post",(req,res)=>{
    res.send({err:0,msg:"这是一个json"})
})

//CRUD操作，可以在最后插入到这个页面的代码中
//添加
// router.post('/add',(req,res)=>{
//     let  {_id, name,age,rex,address} = req.body
//     // 判断参数是否正确
//     User.insertMany({_id,name,age,rex,address})
//         .then((data)=>{
//             res.send({err:0,msg:'添加成功'})
//         })
//         .catch(()=>{
//             res.send({err:-1,msg:'添加失败'})
//         })
// })
// //查询全部
router.get('/getAll',(req,res)=>{
    console.log("执行getAll请求")
    User.find({_id:"5ed0da68e94bc30d54d1bb98"},{_id:0},function (err,docs) {
        if (err){
            console.log("错误："+err)
        }else {
            console.log("集合为："+docs)
            res.send(docs)
        }
    })
        //user.js中的user对象
        // .then((data)=>{
        //     console.log("数据"+data)
        //     res.send({err:0,msg:'查询ok',list:data})
        // })
        // .catch(()=>{
        //     res.send({err:-1,msg:'查询失败'})
        // })
})
//
// //分页查询
// router.post('/getInfoByPage',(req,res)=>{
//     let pageSize=req.body.pageSize || 5 //设置默认值  页面大小5
//     let page =req.body.page || 1
//     let count=0
//     User.find()
//         .then((list)=>{
//             count=list.length //获取总的数据条数
//             return  foodModel.find().limit(Number(pageSize)).skip(Number((page-1)*pageSize))
//         })
//         .then((data)=>{
//             // res.send({err:0,msg:'查询ok',list:data})
//             let  allpage=Math.ceil(count/pageSize)
//             res.send({err:0,msg:'查询ok',info:{list:data,count:count,allpage:allpage}})
//         })
//         .catch(()=>{
//             res.send({err:-1,msg:'查询失败'})
//         })
// })
//
// //关键字查询
// router.post('/getInfoByKw',(req,res)=>{
//     let {kw}=req.body
//     let reg=new RegExp(kw) // 创建一个正则表达式 匹配关键字
//     console.log(kw)
//     User.find({$or:[{_id:{$regex:reg}},{name:{$regex:reg}},
//             {age:{$regex:reg}},{rex:{$regex:reg}},{address:{$regex:reg}}]}) // 名字 以及描述
//         .then((data)=>{
//             res.send({err:0,msg:'查询ok',list:data})
//         })
//         .catch(()=>{
//             res.send({err:-1,msg:'查询失败'})
//         })
// })
// //删除
// router.post('/del',(req,res)=>{
//     let {_id}=req.body
//     //单个删除  多个删除
//     foodModel.remove({_id:_id})
//         .then((data)=>{
//             res.send({err:0,msg:'del ok'})
//         })
//         .catch(()=>{
//             res.send({err:-1,msg:'删除失败'})
//         })
// })
// //修改
// router.post('/update',(req,res)=>{
//     let  {_id, name,age,rex,address} = req.body
//     console.log(req.body)
//     console.log({_id, name,age,rex,address} )
//     foodModel.updateOne({_id},{name,age,rex,address})
//         .then((data)=>{
//             res.send({err:0,msg:'修改 ok'})
//         })
//         .catch(()=>{
//             res.send({err:-1,msg:'修改失败'})
//         })
// })

// 3. 把 router 导出
module.exports = router